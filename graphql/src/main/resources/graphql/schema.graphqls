type Query {
    getUserProfile(email: ID!, token: String!): User
    getStock(email: ID!, token: String!, symbol: String!): StockResult
    getAllPortfolioStocks(email: ID!, token: String!, sortby: String): [PortfolioStock]
    getPortfolioStock(email: ID!, token: String!, symbol: String): PortfolioStock
    getAllTransactions(email: String!, token: String!, sortby: String!): [Transaction!]!
    getUserPortfolio(email: ID!, token: String!): Portfolio
}

type Mutation {
    createUser(firstname: String!, lastname: String!, email: ID!, password:String!, budget: Float!): StringAnswer
    editProfile(currentToken: String!, currentMail: String!, firstname: String, lastname: String, email: String, password: String, budget: Float): UserResult
    resetProfile(tokenEmail: ID!, token: String!): StringAnswer
    deleteProfile(tokenEmail: ID!, token:String!): StringAnswer
    createStock(email: ID!, token: String!, symbol: String!, stockPrice: Float!, name: String!): StringAnswer
    editCurrentValue(token: String!, email: String!, symbol: String!, newValue: Float!): String
    editPortfolioValue(token: String!, email: String!): StringAnswer
    addPortfolioStockOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    # createBuyOrder(tokenTransactionContent: TokenTransactionContentInput!): StringAnswer
    # createSellOrder(tokenTransactionContent: TokenTransactionContentInput!): StringAnswer
}

# Input Types


input EditRequest {
    currentToken: String!
    currentMail: String!
}

input TokenEmail {
    token: String
    tokenEmail: ID!
}

input EditCurrentValue {
    token: String!
    email: String!
    symbol: String!
    newValue: Float!
}

# input TokenTransactionContentInput {
    # token: String
    # transactionContent: TransactionContentInput
# }

input SessionInput {
    email: ID!
    token: String
}

# input AddStockRequest{
   # tokenEmailInput: TokenEmailInput
    # stockInput: StockInput
# }

input TransactionContentInput {
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
}

input StockInput {
    symbol: String
    stockPrice: Float
    name: String
}

# Output Types

type User {
    firstname: String
    lastname: String
    email: ID!
    password: String
    budget: Float
}

type TokenUser {
    token: String
    user: User
}

type Stock {
    symbol: String
    stockPrice: Float
    name: String
    sortby: String
}

type StringAnswer {
    answer: String
}

type TransactionContent {
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
}

type Transaction {
    transactionID: ID!
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
    leftInPortfolio: Float
}

type PortfolioStock {
    portfolioID: ID!
    symbol: String
    stockAmount: Float
    boughtValue: Float
    currentValue: Float
}

type Portfolio {
    portfolioID: ID!
    value: Float
    startValue: Float
    email: ID!
}


union UserResult = User | StringAnswer

union StockResult = Stock | StringAnswer


