type Query {
    getUserProfile(email: ID!, token: String!): User
    getStock(email: ID!, token: String!, symbol: String!): StockResult
    getAllPortfolioStocks(email: ID!, token: String!, sortby: String): [PortfolioStock]
    getPortfolioStock(email: ID!, token: String!, symbol: String): PortfolioStock
    getAllTransactions(email: String!, token: String!, sortby: String!): [Transaction!]!
    getUserPortfolio(email: ID!, token: String!): Portfolio
}

type Mutation {
    createUser(firstname: String!, lastname: String!, email: ID!, password:String!, budget: Float!): StringAnswer
    editProfile(currentToken: String!, currentMail: String!, firstname: String, lastname: String, email: String, password: String, budget: Float): UserResult
    resetProfile(tokenEmail: ID!, token: String!): StringAnswer
    deleteProfile(tokenEmail: ID!, token:String!): StringAnswer
    createStock(email: ID!, token: String!, symbol: String!, stockPrice: Float!, name: String!): StringAnswer
    editCurrentValue(token: String!, email: String!, symbol: String!, newValue: Float!): String
    addPortfolioStockOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    createBuyOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    increasePortfolioStockOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    decreasePortfolioStockOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    deletePortfolioStockOrder(transactionType: Int, stockAmount: Float, date: String, pricePerStock: Float, totalPrice: Float, email: String!, symbol: String, token: String!): StringAnswer
    handleAlexaRequest(alexaRO: AlexaROInput!): AlexaRO
    # createSellOrder(tokenTransactionContent: TokenTransactionContentInput!): StringAnswer
}

# Input Types

input AlexaROInput {
    response: ResponseInput
    session: SessionROInput
}

input ResponseInput {
    outputSpeech: OutputSpeechInput
    shouldEndSession: Boolean
}

input OutputSpeechInput {
    type: String
    text: String
}

input SessionROInput {
    attributes: [SessionAttributeInput]
}

input SessionAttributeInput {
    key: String
    value: String
}

# Output Types

type EditRequest {
    currentToken: String!
    currentMail: String!
}

type TokenEmail {
    token: String
    tokenEmail: ID!
}

type EditCurrentValue {
    token: String!
    email: String!
    symbol: String!
    newValue: Float!
}

type SessionInput {
    email: ID!
    token: String
}

type User {
    firstname: String
    lastname: String
    email: ID!
    password: String
    budget: Float
}

type TokenUser {
    token: String
    user: User
}

type Stock {
    symbol: String
    stockPrice: Float
    name: String
    sortby: String
}

type StringAnswer {
    answer: String
}

type TransactionContent {
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
}

type Transaction {
    transactionID: ID!
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
    leftInPortfolio: Float
}

type PortfolioStock {
    portfolioID: ID!
    symbol: String
    stockAmount: Float
    boughtValue: Float
    currentValue: Float
}

type Portfolio {
    portfolioID: ID!
    value: Float
    startValue: Float
    email: ID!
}

type AlexaRO {
    response: Response
    session: SessionRO
}

type OutputSpeech {
    type: String
    text: String
}

type SessionRO {
    attributes: [SessionAttribute]
}

type SessionAttribute {
    key: String
    value: String
}

type IntentRO {
    name: String
    slots: [Slot]
}

type Slot {
    name: String
    value: String
}

type Response {
    outputSpeech: OutputSpeech
    shouldEndSession: Boolean
}


union UserResult = User | StringAnswer

union StockResult = Stock | StringAnswer


