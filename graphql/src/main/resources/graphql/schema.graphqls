type Query {
    getUserProfile(email: ID!, token: String!): User
    getStock(email: ID!, token: String!, symbol: String!): Stock
    getAllPortfolioStocks(email: ID!, token: String!, sortby: String): [PortfolioStock]
    getAllTransactions(email: ID!, token: String!, sortby: String): [Transaction]
    getUserPortfolio(email: ID!, token: String!): Portfolio
}

type Mutation {
    createUser(userInput: UserInput!): StringAnswer
    editProfile(editRequest: EditRequest!): StringAnswer
    resetProfile(tokenEmailInput: TokenEmailInput!): StringAnswer
    deleteProfile(tokenEmailInput: TokenEmailInput!): StringAnswer
    createStock(addStockRequest: AddStockRequestInput!): StringAnswer
    createBuyOrder(tokenTransactionContent: TokenTransactionContentInput!): StringAnswer
    createSellOrder(tokenTransactionContent: TokenTransactionContentInput!): StringAnswer
}

# Input Types

input UserInput {
    firstname: String
    lastname: String
    email: ID!
    password: String
    budget: Float
}

input EditRequest {
    token: String
    currentmail: String
    user: UserInput # Hier ersetzt durch UserInput
}

input AddStockRequestInput {
    tokenEmail: TokenEmailInput
    stock: StockInput
}

input TokenEmailInput {
    token: String
    email: ID!
}

input TokenTransactionContentInput {
    token: String
    transactionContent: TransactionContentInput
}

input SessionInput {
    email: ID!
    token: String
}

input LoginRequest{
    email: ID!
    password: String
}

input AddStockRequest{
    tokenEmailInput: TokenEmailInput
    stockInput: StockInput
}

input TransactionContentInput {
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
}

input StockInput {
    symbol: String
    stockPrice: Float
    name: String
}

# Output Types

type User {
    firstname: String
    lastname: String
    email: ID!
    password: String
    budget: Float
}

type TokenUser {
    token: String
    user: User
}

type Stock {
    symbol: String
    stockPrice: Float
    name: String
}

type StringAnswer {
    answer: String
}

type TransactionContent {
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
}

type Transaction {
    transactionID: ID!
    transactionType: Int
    stockAmount: Float
    date: String
    pricePerStock: Float
    totalPrice: Float
    email: ID!
    symbol: String
    leftInPortfolio: Float
}

type PortfolioStock {
    portfolioID: ID!
    symbol: String
    stockAmount: Float
    boughtValue: Float
    currentValue: Float
}

type Portfolio {
    portfolioID: ID!
    value: Float
    startValue: Float
    email: ID!
}
